import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import api from "@/config/axios";

const schema = z.object({
  username: z.string().min(2, { message: "Y√™u c·∫ßu nh·∫≠p t√™n ng∆∞·ªùi d√πng" }),
  fullName: z.string().min(2, { message: "Y√™u c·∫ßu nh·∫≠p h·ªç t√™n" }),
  email: z.string().email({ message: "Email kh√¥ng h·ª£p l·ªá" }),
  phone: z.string().min(10, { message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ √≠t nh·∫•t 10 s·ªë" }),
  address: z.string().min(5, { message: "ƒê·ªãa ch·ªâ qu√° ng·∫Øn" }),
  isActive: z.boolean(),
});

export default function UpdateMemberForm({ userId }) {
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
  } = useForm({
    resolver: zodResolver(schema),
  });

  const [user, setUser] = useState({});
  const [isActive, setIsActive] = useState(false);
  const [isChanged, setIsChanged] = useState(false);
  const [dialogOpen, setDialogOpen] = useState(false);

  useEffect(() => {
    if (dialogOpen) {
      const fetchUser = async () => {
        try {
          // D√πng endpoint /profile?username ƒë·ªÉ l·∫•y user b·∫±ng username
          const { data } = await api.get(`users/profile`, {
            params: { username: userId }
          });
          setUser(data.result);
          setIsActive(data.result.active);
          reset(data.result);
          setValue("isActive", data.result.active);
        } catch (error) {
          console.error("L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng:", error);
          toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.");
        }
      };
      fetchUser();
    }
  }, [userId, reset, setValue, dialogOpen]);

  const handleSwitchChange = (checked) => {
    setIsActive(checked);
    setValue("isActive", checked);
    setIsChanged(checked !== user.active);
  };

  const onSubmit = async (formData) => {
    const updateData = { 
      fullName: formData.fullName,
      email: formData.email,
      phone: formData.phone,
      address: formData.address,
      isActive 
    };
    const toastId = toast.loading("ƒêang c·∫≠p nh·∫≠t...");

    try {
      console.log("üîç Updating user with username:", userId);
      console.log("üì¶ Update data:", updateData);
      
      const response = await api.put(`/users/update/${userId}`, updateData, {
        headers: { "Content-Type": "application/json" },
      });

      if (response.status === 200) {
        toast.update(toastId, {
          render: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
          type: "success",
          isLoading: false,
          autoClose: 2000,
        });
        setDialogOpen(false);
        // Reload page ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
        window.location.reload();
      } else {
        throw new Error(response.data.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      }
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
      toast.update(toastId, {
        render: error.response?.data?.message || "L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t.",
        type: "error",
        isLoading: false,
        autoClose: 2000,
      });
    }
  };

  return (
    <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
      <ToastContainer position="top-right" autoClose={2000} />
      <DialogTrigger asChild>
        <Button variant="outline">Ch·ªânh s·ª≠a</Button>
      </DialogTrigger>
      <DialogContent className="w-full max-w-2xl mx-auto">
        <DialogHeader>
          <DialogTitle>Ch·ªânh s·ª≠a th√¥ng tin th√†nh vi√™n</DialogTitle>
          <DialogDescription>
            Th·ª±c hi·ªán thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n. Nh·∫•n l∆∞u khi b·∫°n ho√†n t·∫•t.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="username">T√™n ng∆∞·ªùi d√πng</Label>
            <Input
              id="username"
              name="username"
              defaultValue={user.username}
              {...register("username")}
              disabled
              className="bg-gray-100"
            />
            {errors.username?.message && <p className="text-red-600 text-sm">{errors.username?.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="fullName">H·ªç v√† t√™n</Label>
            <Input
              id="fullName"
              name="fullName"
              defaultValue={user.fullName}
              {...register("fullName")}
              placeholder="Nh·∫≠p h·ªç v√† t√™n"
            />
            {errors.fullName?.message && <p className="text-red-600 text-sm">{errors.fullName?.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              name="email"
              type="email"
              defaultValue={user.email}
              {...register("email")}
              placeholder="Nh·∫≠p email"
            />
            {errors.email?.message && <p className="text-red-600 text-sm">{errors.email?.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
            <Input
              id="phone"
              name="phone"
              defaultValue={user.phone}
              {...register("phone")}
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            />
            {errors.phone?.message && <p className="text-red-600 text-sm">{errors.phone?.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
            <Input
              id="address"
              name="address"
              defaultValue={user.address}
              {...register("address")}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
            />
            {errors.address?.message && <p className="text-red-600 text-sm">{errors.address?.message}</p>}
          </div>

          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Switch
                id="isActive"
                checked={isActive}
                onCheckedChange={handleSwitchChange}
              />
              <Label htmlFor="isActive">Tr·∫°ng th√°i ho·∫°t ƒë·ªông</Label>
            </div>
          </div>

          <Separator className="my-4" />

          <DialogFooter>
            <Button type="submit">
              L∆∞u thay ƒë·ªïi
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}